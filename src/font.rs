use clap::error::Result;
use std::ops::RangeInclusive;

pub const FONT_TOTAL: usize = 2;

pub const WIDTH: [u16; FONT_TOTAL] = [5, 3];
pub const HEIGHT: [u16; FONT_TOTAL] = [7, 5];

// .***. ..*.. .***. .***. *...* ***** ...*. ***** .***. .***. .....
// *...* .**.. *...* *...* *...* *.... ..*.. ....* *...* *...* ..*..
// *...* *.*.. ...*. ....* *...* *.... .*... ....* *...* *...* ..*..
// *...* ..*.. ..*.. .***. *...* ****. ****. ...*. .***. .**** .....
// *...* ..*.. .*... ....* ***** ....* *...* ..*.. *...* ...*. ..*..
// *...* ..*.. *.... *...* ....* *...* *...* .*... *...* ..*.. ..*..
// .***. ***** ***** .***. ....* .***. .***. *.... .***. .*... .....

// *** .*. *** *** *.* *** *** *** *** *** ...
// *.* .*. ..* ..* *.* *.. *.. ..* *.* *.* .*.
// *.* .*. *** *** *** *** *** ..* *** *** ...
// *.* .*. *.. ..* ..* ..* *.* ..* *.* ..* .*.
// *** .*. *** *** ..* *** *** ..* *** *** ...

pub const DIGIT: [[u64; 12]; FONT_TOTAL] = [
    [
        0b01110_10001_10001_10001_10001_10001_01110,
        0b11111_00100_00100_00100_10100_01100_00100,
        0b11111_10000_01000_00100_00010_10001_01110,
        0b01110_10001_00001_01110_00001_10001_01110,
        0b00001_00001_11111_10001_10001_10001_10001,
        0b01110_10001_00001_11110_10000_10000_11111,
        0b01110_10001_10001_11110_01000_00100_00010,
        0b10000_01000_00100_00010_00001_00001_11111,
        0b01110_10001_10001_01110_10001_10001_01110,
        0b01000_00100_00010_01111_10001_10001_01110,
        0b00000_00100_00100_00000_00100_00100_00000,
        0b00000_00000_00000_00000_00000_00000_00000,
    ],
    [
        0b111_101_101_101_111,
        0b010_010_010_010_010,
        0b111_100_111_001_111,
        0b111_001_111_001_111,
        0b001_001_111_101_101,
        0b111_001_111_100_111,
        0b111_101_111_100_111,
        0b001_001_001_001_111,
        0b111_101_111_101_111,
        0b111_001_111_101_111,
        0b000_010_000_010_000,
        0b000_000_000_000_000,
    ],
];

const FONT_RANGE: RangeInclusive<usize> = 0..=FONT_TOTAL - 1;

pub fn font_in_range(s: &str) -> Result<usize, String> {
    let num: usize = s.parse().map_err(|_| format!("`{s}` isn't a number"))?;
    if FONT_RANGE.contains(&num) {
        Ok(num)
    } else {
        Err(format!(
            "font number not in range {}-{}",
            FONT_RANGE.start(),
            FONT_RANGE.end()
        ))
    }
}
